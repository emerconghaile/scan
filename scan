#!/bin/bash
# script to take user parameter input and scan documents
# add if blank, then remove parameter option
# add function to scan for availabile printers, return as numbered list, and ask for number

printf "Scan parameters required (leave blank for 1st param):%b\n\n"

# user selects the format parameter
format_bool=false
format_array=("pnm" "tiff" "png" "jpeg")
printf "Which format? (${format_array[*]})%b\n"
while [ $format_bool = false ]
do
  read format_scan
    if [[ " ${format_array[@]} " =~ " $format_scan " ]]
    then
      format_bool=true
      printf "Saving scan as .$format_scan%b\n\n"
    elif [ -z "$format_scan" ]
    then
      format_scan="${format_array[0]}"
      format_bool=true
      printf "Saving scan as .$format_scan%b\n\n"
    else
      printf "Invalid format%b\n"
    fi
done

# user selects the mode parameter
mode_bool=false
mode_array=("gray" "color")
printf "Which mode? (${mode_array[*]})%b\n"
while [ $mode_bool = false ]
do
  read mode_scan
    if [[ " ${mode_array[@]} " =~ " $mode_scan " ]]
    then
      mode_bool=true
      printf "Scanning in $mode_scan mode%b\n\n"
    elif [ -z "$mode_scan" ]
    then
      mode_scan="${mode_array[0]}"
      mode_bool=true
      printf "Scanning in $mode_scan%b\n\n"
    else
      printf "Invalid mode%b\n"
    fi
done

# user selects the resolution parameter
res_bool=false
res_array=("75" "100" "200" "300" "600" "1200")
printf "What dpi resolution? (${res_array[*]})%b\n"
while [ $res_bool = false ]
do
  read res_scan
    if [[ " ${res_array[@]} " =~ " $res_scan " ]]
    then
      res_bool=true
      printf "Scanning at $res_scan dpi%b\n\n"
    elif [ -z "$res_scan" ]
    then
      res_scan="${res_array[0]}"
      res_bool=true
      printf "Scanning at $res_scan dpi%b\n\n"
    else
      printf "Invalid resolution%b\n"
    fi
done

# user selects the printer scanner source parameter
source_bool=false
source_array=("Flatbed" "ADF")
printf "Which source? (${source_array[*]})%b\n"
while [ $source_bool = false ]
do
  read source_scan
    if [[ " ${source_array[@]} " =~ " $source_scan " ]]
    then
      source_bool=true
      printf "Scanning from $source_scan%b\n\n"
    elif [ -z "$source_scan" ]
    then
      source_scan="${source_array[0]}"
      source_bool=true
      printf "Scanning from $source_scan%b\n\n"
    else
      printf "Invalid source%b\n"
    fi
done

# user defines the path to save scan
printf "Where to save?%b\n"
dest_bool=false
while [ $dest_bool = false ]
do
  read -e dest_scan
  eval dest_scan=$dest_scan
  if [ ! -z "$dest_scan" ]
  then
    dest_bool=true
    printf "Saving scan to $dest_scan%b\n\n"
  elif [ -z "$dest_scan" ]
  then
    printf "Must define a save path!%b\n"
  fi
done

# run scanimage with user defined parameters
scanimage -v -d escl:http://192.168.1.138:8080 --format="$format_scan" --mode "$mode_scan" --resolution "$res_scan" --source "$source_scan" > "$dest_scan"

# scan success confirmation
printf "%b\n$dest_scan%b\n"
if [ -f "$dest_scan" ]
then
  printf "Scan success!%b\n"
else
  printf "Something went wrong!%b\n"
fi